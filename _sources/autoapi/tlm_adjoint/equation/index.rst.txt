:orphan:

:py:mod:`tlm_adjoint.equation`
==============================

.. py:module:: tlm_adjoint.equation


Module Contents
---------------

.. py:class:: Equation(X, deps, nl_deps=None, *, ic_deps=None, ic=None, adj_ic_deps=None, adj_ic=None, adj_type='conjugate_dual')




   
   Core equation class. Defines a differentiable operation for use as an
   adjoint tape record.

   The equation is defined via a residual function :math:`\mathcal{F}`. The
   forward solution is defined implicitly as the value :math:`x` for which

   .. math::

       \mathcal{F} \left( x, y_0, y_1, \ldots \right) = 0,

   where :math:`y_i` are dependencies.

   This is an abstract base class. Information required to solve forward
   equations, perform adjoint calculations, and define tangent-linear
   equations, is provided by overloading abstract methods. This class does
   *not* inherit from :class:`abc.ABC`, so that methods may be implemented as
   needed.

   :arg X: A variable, or a :class:`Sequence` of variables, defining the
       forward solution.
   :arg deps: A :class:`Sequence` of variables defining dependencies. Must
       define a superset of `X`.
   :arg nl_deps: A :class:`Sequence` of variables defining non-linear
       dependencies. Must define a subset of `deps`. Defaults to `deps`.
   :arg ic_deps: A :class:`Sequence` of variables whose value must be
       available prior to computing the forward solution. Intended for
       iterative methods with non-zero initial guesses. Must define a subset
       of `X`. Can be overridden by `ic`.
   :arg ic: Whether `ic_deps` should be set equal to `X`. Defaults to `True`
       if `ic_deps` is not supplied, and to `False` otherwise.
   :arg adj_ic_deps: A :class:`Sequence` of variables whose value must be
       available prior to computing the adjoint solution. Intended for
       iterative methods with non-zero initial guesses. Must define a subset
       of `X`. Can be overridden by `adj_ic`.
   :arg adj_ic: Whether `adj_ic_deps` should be set equal to `X`. Defaults to
       `True` if `adj_ic_deps` is not supplied, and to `False` otherwise.
   :arg adj_type: The space type relative to `X` of adjoint variables.
       `'primal'` or `'conjugate_dual'`, or a :class:`Sequence` of these.















   ..
       !! processed by numpydoc !!
   .. py:method:: drop_references()

      
      Drop references to variables which store values.
















      ..
          !! processed by numpydoc !!

   .. py:method:: x()

      
      Return the forward solution variable, assuming the forward solution
      has one component.

      :returns: A variable defining the forward solution.















      ..
          !! processed by numpydoc !!

   .. py:method:: X(m=None)

      
      Return forward solution variables.

      :returns: If `m` is supplied, a variable defining the `m` th component
          of the forward solution. If `m` is not supplied, a :class:`tuple`
          of variables defining the forward solution.















      ..
          !! processed by numpydoc !!

   .. py:method:: dependencies()

      
      Return dependencies.

      :returns: A :class:`tuple` of variables defining dependencies.















      ..
          !! processed by numpydoc !!

   .. py:method:: nonlinear_dependencies()

      
      Return non-linear dependencies.

      :returns: A :class:`tuple` of variables defining non-linear
          dependencies.















      ..
          !! processed by numpydoc !!

   .. py:method:: initial_condition_dependencies()

      
      Return 'initial condition' dependencies -- dependencies whose value
      is needed prior to computing the forward solution.

      :returns: A :class:`tuple` of variables defining initial condition
          dependencies.















      ..
          !! processed by numpydoc !!

   .. py:method:: adjoint_initial_condition_dependencies()

      
      Return adjoint 'initial condition' dependencies -- dependencies
      whose value is needed prior to computing the adjoint solution.

      :returns: A :class:`tuple` of variables defining adjoint initial
          condition dependencies.















      ..
          !! processed by numpydoc !!

   .. py:method:: adj_x_type()

      
      Return the space type for the adjoint solution, relative to the
      forward solution, assuming the forward solution has exactly one
      component.

      :returns: One of `'primal'` or `'conjugate_dual'`.















      ..
          !! processed by numpydoc !!

   .. py:method:: adj_X_type(m=None)

      
      Return the space type for the adjoint solution, relative to the
      forward solution.

      :returns: If `m` is supplied, one of `'primal'` or `'conjugate_dual'`
          defining the relative space type for the `m` th component of the
          adjoint solution. If `m` is not supplied, a :class:`tuple` whose
          elements are `'primal'` or `'conjugate_dual'`, defining the
          relative space type of the adjoint solution.















      ..
          !! processed by numpydoc !!

   .. py:method:: new_adj_x()

      
      Return a new variable suitable for storing the adjoint solution,
      assuming the forward solution has exactly one component.

      :returns: A variable suitable for storing the adjoint solution.















      ..
          !! processed by numpydoc !!

   .. py:method:: new_adj_X(m=None)

      
      Return new variables suitable for storing the adjoint solution.

      :returns: If `m` is supplied, a variable suitable for storing the `m`
          th component of the adjoint solution. If `m` is not supplied, a
          :class:`tuple` of variables suitable for storing the adjoint
          solution.















      ..
          !! processed by numpydoc !!

   .. py:method:: solve(*, annotate=None, tlm=None)

      
      Compute the forward solution.

      :arg annotate: Whether the :class:`.EquationManager` should record the
          solution of equations.
      :arg tlm: Whether tangent-linear equations should be solved.















      ..
          !! processed by numpydoc !!

   .. py:method:: forward(X, deps=None)

      
      Wraps :meth:`.Equation.forward_solve` to handle cache invalidation.
















      ..
          !! processed by numpydoc !!

   .. py:method:: forward_solve(X, deps=None)
      :abstractmethod:

      
      Compute the forward solution.

      Can assume that the currently active :class:`.EquationManager` is
      paused.

      :arg X: A variable or a :class:`Sequence` of variables storing the
          solution. May define an initial guess, and should be set by this
          method.
      :arg deps: A :class:`tuple` of variables, defining values for
          dependencies. Only the elements corresponding to `X` may be
          modified. `self.dependencies()` should be used if not supplied.















      ..
          !! processed by numpydoc !!

   .. py:method:: adjoint(adj_X, nl_deps, B, dep_Bs)

      
      Compute the adjoint solution, and subtract terms from other adjoint
      right-hand-sides.

      :arg adj_X: Either `None`, or a :class:`Sequence` of variables defining
          the initial guess for an iterative solve. May be modified or
          returned.
      :arg nl_deps: A :class:`Sequence` of variables defining values for
          non-linear dependencies. Should not be modified.
      :arg B: A :class:`Sequence` of variables defining the right-hand-side
          of the adjoint equation. May be modified or returned.
      :arg dep_Bs: A :class:`Mapping` whose items are `(dep_index, dep_B)`.
          Each `dep_B` is an :class:`.AdjointRHS` which should be updated by
          subtracting adjoint derivative information computed by
          differentiating with respect to `self.dependencies()[dep_index]`.

      :returns: A :class:`tuple` of variables defining the adjoint solution,
          or `None` to indicate that the solution is zero.















      ..
          !! processed by numpydoc !!

   .. py:method:: adjoint_cached(adj_X, nl_deps, dep_Bs)

      
      Subtract terms from other adjoint right-hand-sides.

      :arg adj_X: A :class:`Sequence` of variables defining the adjoint
          solution. Should not be modified.
      :arg nl_deps: A :class:`Sequence` of variables defining values for
          non-linear dependencies. Should not be modified.
      :arg dep_Bs: A :class:`Mapping` whose items are `(dep_index, dep_B)`.
          Each `dep_B` is an :class:`.AdjointRHS` which should be updated by
          subtracting adjoint derivative information computed by
          differentiating with respect to `self.dependencies()[dep_index]`.















      ..
          !! processed by numpydoc !!

   .. py:method:: adjoint_derivative_action(nl_deps, dep_index, adj_X)
      :abstractmethod:

      
      Return the action of the adjoint of a derivative of the forward
      residual on the adjoint solution. This is the *negative* of an adjoint
      right-hand-side term.

      :arg nl_deps: A :class:`Sequence` of variables defining values for
          non-linear dependencies. Should not be modified.
      :arg dep_index: An :class:`int`. The derivative is defined by
          differentiation of the forward residual with respect to
          `self.dependencies()[dep_index]`.
      :arg adj_X: The adjoint solution. A variable or a :class:`Sequence` of
          variables. Should not be modified.
      :returns: The action of the adjoint of a derivative on the adjoint
          solution. Will be passed to
          :func:`.subtract_adjoint_derivative_action`, and valid types depend
          upon the adjoint variable type. Typically this will be a variable,
          or a two element :class:`tuple` `(alpha, F)`, where `alpha` is a
          :class:`numbers.Complex` and `F` a variable, with the value defined
          by the product of `alpha` and `F`.















      ..
          !! processed by numpydoc !!

   .. py:method:: subtract_adjoint_derivative_actions(adj_X, nl_deps, dep_Bs)

      
      Subtract terms from other adjoint right-hand-sides.

      Can be overridden for an optimized implementation, but otherwise uses
      :meth:`.Equation.adjoint_derivative_action`.

      :arg adj_X: The adjoint solution. A variable or a :class:`Sequence` of
          variables. Should not be modified.
      :arg nl_deps: A :class:`Sequence` of variables defining values for
          non-linear dependencies. Should not be modified.
      :arg dep_Bs: A :class:`Mapping` whose items are `(dep_index, dep_B)`.
          Each `dep_B` is an :class:`.AdjointRHS` which should be updated by
          subtracting adjoint derivative information computed by
          differentiating with respect to `self.dependencies()[dep_index]`.















      ..
          !! processed by numpydoc !!

   .. py:method:: adjoint_jacobian_solve(adj_X, nl_deps, B)
      :abstractmethod:

      
      Compute an adjoint solution.

      :arg adj_X: Either `None`, or a variable or :class:`Sequence` of
          variables defining the initial guess for an iterative solve. May be
          modified or returned.
      :arg nl_deps: A :class:`Sequence` of variables defining values for
          non-linear dependencies. Should not be modified.
      :arg B: The right-hand-side. A variable or :class:`Sequence` of
          variables storing the value of the right-hand-side. May be modified
          or returned.
      :returns: A variable or :class:`Sequence` of variables storing the
          value of the adjoint solution. May return `None` to indicate a
          value of zero.















      ..
          !! processed by numpydoc !!

   .. py:method:: tangent_linear(tlm_map)
      :abstractmethod:

      
      Derive an :class:`.Equation` corresponding to a tangent-linear
      operation.

      :arg tlm_map: A :class:`.TangentLinearMap` storing values for
          tangent-linear variables.
      :returns: An :class:`.Equation`, corresponding to the tangent-linear
          operation.















      ..
          !! processed by numpydoc !!


.. py:class:: ZeroAssignment(X)




   
   Represents an assignment

   .. math::

       x = 0.

   The forward residual is defined

   .. math::

       \mathcal{F} \left( x \right) = x.

   :arg X: A variable or a :class:`Sequence` of variables defining the forward
       solution :math:`x`.















   ..
       !! processed by numpydoc !!
   .. py:method:: forward_solve(X, deps=None)

      
      Compute the forward solution.

      Can assume that the currently active :class:`.EquationManager` is
      paused.

      :arg X: A variable or a :class:`Sequence` of variables storing the
          solution. May define an initial guess, and should be set by this
          method.
      :arg deps: A :class:`tuple` of variables, defining values for
          dependencies. Only the elements corresponding to `X` may be
          modified. `self.dependencies()` should be used if not supplied.















      ..
          !! processed by numpydoc !!

   .. py:method:: adjoint_jacobian_solve(adj_X, nl_deps, B)

      
      Compute an adjoint solution.

      :arg adj_X: Either `None`, or a variable or :class:`Sequence` of
          variables defining the initial guess for an iterative solve. May be
          modified or returned.
      :arg nl_deps: A :class:`Sequence` of variables defining values for
          non-linear dependencies. Should not be modified.
      :arg B: The right-hand-side. A variable or :class:`Sequence` of
          variables storing the value of the right-hand-side. May be modified
          or returned.
      :returns: A variable or :class:`Sequence` of variables storing the
          value of the adjoint solution. May return `None` to indicate a
          value of zero.















      ..
          !! processed by numpydoc !!

   .. py:method:: tangent_linear(tlm_map)

      
      Derive an :class:`.Equation` corresponding to a tangent-linear
      operation.

      :arg tlm_map: A :class:`.TangentLinearMap` storing values for
          tangent-linear variables.
      :returns: An :class:`.Equation`, corresponding to the tangent-linear
          operation.















      ..
          !! processed by numpydoc !!


.. py:class:: NullSolver(X)




   
   Represents an assignment

   .. math::

       x = 0.

   The forward residual is defined

   .. math::

       \mathcal{F} \left( x \right) = x.

   :arg X: A variable or a :class:`Sequence` of variables defining the forward
       solution :math:`x`.















   ..
       !! processed by numpydoc !!

